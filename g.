#!/bin/bash

# --- git-ai-commit (g.) ---
# Stages, commits with AI message (via Ollama) or provided message, and pushes.
# Repository: https://github.com/Bikz/git-ai-commit

# --- Configuration ---
MODEL=${GAC_MODEL:-"llama3.2"} # Default model set to llama3.2
OLLAMA_ENDPOINT=${GAC_OLLAMA_ENDPOINT:-"http://localhost:11434/api/chat"}
TEMP=${GAC_TEMP:-0.7}
DIVIDER="-----------------------------------------"
# --- End Configuration ---

# --- Helper Functions ---
# Use prefixes for clarity
echo_step() { # Yellow prefix for steps
  echo -e "\033[0;33m[⚙️] $1\033[0m"
}
echo_success() { # Green prefix for success
  echo -e "\033[0;32m[✓] $1\033[0m"
}
echo_warn() { # Yellow prefix for warnings
  echo -e "\033[0;33m[⚠️] $1\033[0m"
}
echo_info() { # Normal text, maybe slight indent
  echo "    $1"
}
echo_red() { # Red prefix for errors
  echo -e "\033[0;31m[✗] Error: $1\033[0m" >&2
}
echo_commit() { # Special formatting for commit message - Green text
   echo -e "\033[0;32m$1\033[0m"
}
# --- End Helper Functions ---


# --- Sanity Checks ---
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo_red "Not inside a Git repository."
  exit 1
fi
if ! command -v jq &> /dev/null; then
    echo_red "'jq' command not found, required for reliable JSON handling."
    echo_info "Please install jq (e.g., brew install jq, sudo apt install jq)."
    exit 1
fi
if ! command -v ollama &> /dev/null; then
    echo_red "'ollama' command not found."
    echo_info "Please install Ollama from https://ollama.ai and ensure it's in your PATH."
    exit 1
fi
# --- End Sanity Checks ---


# --- Main Logic ---
echo "" # Start with a blank line

COMMIT_MESSAGE=""
ACTION_SUMMARY="" # To store summary of actions

# --- Git Add ---
echo_step "Staging all changes ('git add .')..."
if ! git add . ; then
  echo_red "Failed to stage changes."
  exit 1
fi
STAGED_FILES=$(git diff --staged --name-only | wc -l | awk '{$1=$1};1') # Get count of staged files
if [ "$STAGED_FILES" -eq 0 ]; then
    # Check if there are unstaged changes
    if [ -n "$(git status --porcelain)" ]; then
        echo_warn "No changes staged. There are unstaged changes or untracked files."
        echo_info "You might want to stage them first with 'git add .'"
    else
        echo_success "No changes detected or staged. Working tree clean."
    fi
    exit 0
else
    echo_success "Staged $STAGED_FILES file(s)."
    ACTION_SUMMARY+="Staged $STAGED_FILES file(s). "
fi
echo "" # Spacing

# --- Commit Message Handling ---
if [ -n "$1" ]; then
  COMMIT_MESSAGE="$1"
  echo_step "Using provided commit message..."
  echo_commit "    $COMMIT_MESSAGE"
  ACTION_SUMMARY+="Used provided commit message. "
  echo "" # Spacing
else
  # --- Model Check ---
  echo_step "Checking local Ollama model: $MODEL..."
  if ! ollama list | grep -q "^${MODEL}"; then
    echo_warn "Model '$MODEL' not found locally. Attempting to pull..."
    if ! ollama pull "$MODEL"; then
      echo_red "Failed to pull model '$MODEL'."
      echo_info "Check model name and internet connection. Try 'ollama pull $MODEL'."
      exit 1
    fi
    echo_success "Model '$MODEL' pulled successfully."
  else
    echo_success "Model '$MODEL' found locally."
  fi
  echo "" # Spacing

  # --- Diff ---
  echo_step "Analyzing staged changes for AI..."
  DIFF_CONTENT=$(git diff --staged)
  if [ -z "$DIFF_CONTENT" ]; then
      # This case should ideally not happen if STAGED_FILES > 0, but good fallback
      echo_success "No changes staged to commit (double check)."
      exit 0
  fi
  echo_success "Diff analysis complete."
  echo "" # Spacing

  # --- AI Generation ---
  echo_step "Generating commit message via Ollama (Model: $MODEL)..."

  USER_PROMPT_CONTENT=$(printf 'Generate a conventional commit message for the following diff:\n\n%s' "$DIFF_CONTENT")
  JSON_PAYLOAD=$(jq -n \
    --arg model "$MODEL" \
    --arg system_content "You are an expert programmer writing a concise Git commit message. Follow the Conventional Commits specification (e.g., fix:, feat:, chore:). Describe the changes based *only* on the provided diff. Do not add any explanations, notes, apologies, or introductory phrases like 'Here is the commit message:'. Output ONLY the commit message." \
    --arg user_content "$USER_PROMPT_CONTENT" \
    --argjson temp "$TEMP" \
    '{ model: $model, messages: [ {role: "system", content: $system_content}, {role: "user", content: $user_content} ], stream: false, options: { temperature: $temp } }')

  if [ $? -ne 0 ]; then
      echo_red "Failed to construct JSON payload using jq."
      git reset > /dev/null 2>&1
      exit 1
  fi

  OLLAMA_RESPONSE=$(curl -sf -X POST "$OLLAMA_ENDPOINT" -d "$JSON_PAYLOAD")
  CURL_EXIT_CODE=$?

  if [ $CURL_EXIT_CODE -ne 0 ]; then
      echo_red "Failed to communicate with Ollama API at $OLLAMA_ENDPOINT."
      echo_info "Curl exit code: $CURL_EXIT_CODE. Ensure Ollama service is running ('ollama ps')."
      git reset > /dev/null 2>&1
      exit 1
  fi

  GENERATED_CONTENT=$(echo "$OLLAMA_RESPONSE" | jq -r '.message.content // empty')
  OLLAMA_ERROR=$(echo "$OLLAMA_RESPONSE" | jq -r '.error // empty')

  if [ -n "$OLLAMA_ERROR" ] && [ "$OLLAMA_ERROR" != "null" ] && [ "$OLLAMA_ERROR" != "empty" ]; then
    echo_red "Ollama API returned an error: $OLLAMA_ERROR"
    echo_info "Ensure model '$MODEL' is available and Ollama service operational."
    git reset > /dev/null 2>&1
    exit 1
  fi

  COMMIT_MESSAGE=$(echo "$GENERATED_CONTENT" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//') # Trim whitespace

  if [ -z "$COMMIT_MESSAGE" ]; then
    echo_red "Ollama generated an empty or invalid commit message."
    echo_info "Ollama Raw Response: $OLLAMA_RESPONSE"
    git reset > /dev/null 2>&1
    exit 1
  fi

  echo_success "AI message generated."
  echo "" # Spacing
  echo_step "Generated Commit Message:"
  echo_commit "    $COMMIT_MESSAGE" # Display generated message clearly
  ACTION_SUMMARY+="Generated AI commit message. "
  echo "" # Spacing
fi

# --- Commit ---
echo_step "Committing changes..."
# Use -q for quieter commit, show hash separately
if ! git commit -m "$COMMIT_MESSAGE" -q; then
  echo_red "Git commit failed."
  echo_info "There might be pre-commit hooks failing or other issues."
  git reset > /dev/null 2>&1 # Try to unstage if commit failed
  exit 1
fi
COMMIT_HASH=$(git rev-parse --short HEAD)
echo_success "Commit successful ($COMMIT_HASH)."
ACTION_SUMMARY+="Committed ($COMMIT_HASH). "
echo "" # Spacing

# --- Push ---
echo_step "Pushing changes..."
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if git remote | grep -q '^origin$'; then
    REMOTE_NAME="origin"
else
    REMOTE_NAME=$(git remote | head -n 1)
fi

if [ -z "$REMOTE_NAME" ]; then
    echo_warn "No git remote found. Skipping push."
    ACTION_SUMMARY+="Push skipped (no remote). "
else
    echo_info "Pushing to $REMOTE_NAME/$CURRENT_BRANCH..."
    # Use -q for quieter push
    if ! git push "$REMOTE_NAME" "$CURRENT_BRANCH" -q; then
        echo_red "Git push failed."
        echo_info "Check remote connection, permissions, or if remote branch has new commits."
        echo_info "You may need to push manually."
        ACTION_SUMMARY+="Push FAILED. "
        # Still exit 0 because the commit succeeded, which is the main goal
    else
        echo_success "Push successful to $REMOTE_NAME/$CURRENT_BRANCH."
        ACTION_SUMMARY+="Pushed successfully. "
    fi
fi

# --- Final Summary ---
echo ""
echo "$DIVIDER"
echo_success "git-ai-commit finished!"
echo_info "$ACTION_SUMMARY"
echo "$DIVIDER"
echo ""

exit 0