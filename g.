#!/bin/bash

# --- git-ai-commit (g.) ---
# Stages, commits with AI message (via Ollama) or provided message, and pushes.
# Includes self-update mechanism.
# Repository: https://github.com/Bikz/git-ai-commit

# --- Configuration ---
MODEL=${GAC_MODEL:-"qwen2.5-coder:1.5b"} # Default model set to qwen2.5-coder:1.5b (small & fast)
OLLAMA_ENDPOINT=${GAC_OLLAMA_ENDPOINT:-"http://localhost:11434/api/chat"}
TEMP=${GAC_TEMP:-0.2} # Lower temp for more predictable formatting
DIVIDER="-----------------------------------------"
COMMIT_DIVIDER="——————————————————" # Divider for commit message

# --- Update Configuration ---
# !!IMPORTANT!!: Update GITHUB_USER and REPO_NAME if yours are different
GITHUB_USER="Bikz"
REPO_NAME="git-ai-commit"
SCRIPT_FILENAME="g."
BRANCH_NAME="main" # Or whichever branch hosts the release version
REMOTE_SCRIPT_URL="https://raw.githubusercontent.com/${GITHUB_USER}/${REPO_NAME}/${BRANCH_NAME}/${SCRIPT_FILENAME}"
CHECK_INTERVAL_SECONDS=$((60*60*24)) # Check once per day (86400 seconds)
CACHE_DIR="$HOME/.cache/git-ai-commit"
LAST_CHECK_FILE="${CACHE_DIR}/last_check_ts"
INSTALL_PATH="$0" # Assumes script is run from PATH or directly
# --- End Update Configuration ---

# --- Helper Functions ---
# Simplified color scheme: white for info, green for success, red for error
echo_info() { echo -e "$1"; } # White/Default
echo_success() { echo -e "\033[0;32m$1\033[0m"; } # Green
echo_error() { echo -e "\033[0;31mError: $1\033[0m" >&2; } # Red
echo_indented() { # Print indented text
  while IFS= read -r line; do echo "  $line"; done <<< "$1"
}
# --- End Helper Functions ---

# --- ASCII Art Logo Function ---
show_logo() {
  local green="\033[0;32m" # Green for g.
  local white="\033[0m"    # White/Reset

  echo -e "${green} __ _      ${white}"
  echo -e "${green} / _\` |     ${white}"
  echo -e "${green}| (_| |    ${white}  git-ai-commit"  
  echo -e "${green} \\__, | (_)${white}  ---------------"
  echo -e "${green}  __/ |    ${white}  https://github.com/${GITHUB_USER}/${REPO_NAME}"
  echo -e "${green} |___/     ${white}"
  echo "" # Add a blank line after logo
}
# --- End ASCII Art Logo Function ---

# --- Update Functions ---

# Function to find a suitable hashing command
get_hash_command() {
  if command -v sha256sum >/dev/null; then echo "sha256sum";
  elif command -v shasum >/dev/null && shasum -a 256 -c <<<"foo bar" >/dev/null 2>&1; then echo "shasum -a 256";
  elif command -v md5sum >/dev/null; then echo "md5sum";
  elif command -v md5 >/dev/null; then echo "md5 -r";
  else return 1; fi
  return 0
}

# Function to calculate hash of content (stdin)
calculate_hash() {
  local hash_cmd="$1"
  # Read from stdin and pipe to hash command, extract first field (the hash)
  $hash_cmd | awk '{print $1}'
}

# Function to check for updates periodically
check_for_update() {
  # Ensure cache directory exists
  mkdir -p "$CACHE_DIR" || { echo_info "Could not create cache directory: $CACHE_DIR. Skipping update check."; return 1; }

  # Check if we need to perform the check based on interval
  local now threshold interval="$1" hash_cmd current_hash remote_hash remote_content last_check
  now=$(date +%s)
  threshold=$((now - interval))
  if [[ -f "$LAST_CHECK_FILE" ]]; then
    # Get modification time using stat (cross-platform friendly attempt)
    last_check=$(stat -f %m "$LAST_CHECK_FILE" 2>/dev/null || stat -c %Y "$LAST_CHECK_FILE" 2>/dev/null)
    # Ensure last_check is a number
    if [[ "$last_check" =~ ^[0-9]+$ ]] && [[ "$last_check" -gt "$threshold" ]]; then
       # Last check was recent enough, skip.
       return 0
    fi
  fi

  # Update timestamp *before* network access
  # If network fails, we won't check again immediately.
  touch "$LAST_CHECK_FILE" || { echo_info "Could not update timestamp file: $LAST_CHECK_FILE."; } # Don't exit, just warn

  # Find a hashing command
  if ! hash_cmd=$(get_hash_command); then
    echo_info "Cannot check for updates: No suitable hashing command found."
    return 1
  fi

  # Check dependencies for the check itself
  if ! command -v curl &>/dev/null || ! command -v awk &>/dev/null || ! command -v date &>/dev/null || ! command -v stat &>/dev/null ; then
    echo_info "Cannot check for updates: Required command missing (curl, awk, date, stat)."
    return 1
  fi

  # Calculate hash of the current script
  current_hash=$(cat "$INSTALL_PATH" | calculate_hash "$hash_cmd")
  if [[ -z "$current_hash" ]]; then
    echo_info "Could not calculate hash of local script. Skipping update check."
    return 1
  fi

  # Fetch remote script content
  remote_content=$(curl -fsSL "$REMOTE_SCRIPT_URL")
  if [[ $? -ne 0 ]] || [[ -z "$remote_content" ]]; then
    # Silently ignore failed fetches (network issue, repo down etc)
    return 0
  fi

  # Calculate hash of remote script content
  remote_hash=$(echo "$remote_content" | calculate_hash "$hash_cmd")
   if [[ -z "$remote_hash" ]]; then
    echo_info "Could not calculate hash of remote script. Skipping update check."
    return 1
  fi

  # Compare hashes
  if [[ "$current_hash" != "$remote_hash" ]]; then
    echo ""
    show_logo
    echo_info "A new version of git-ai-commit ('g.') is available!"
    echo_info "Run 'g. --update' to install it."
    echo ""
  fi
  return 0
}

# Function to perform the self-update
perform_update() {
  # Ensure potential errors within this function cause an exit
  # Run in a subshell to contain 'set -e' and trap behavior
  (
    set -e # Apply error exit only within this subshell
    show_logo
    echo_info "Checking for updates to '$SCRIPT_FILENAME'..."
    
    # Check dependencies for the update
    if ! command -v curl &>/dev/null || ! command -v chmod &>/dev/null || ! command -v mv &>/dev/null || ! command -v mktemp &>/dev/null; then
        echo_error "Update failed: Required command missing ('curl', 'chmod', 'mv', 'mktemp')."; exit 1;
    fi
    
    # Find a suitable hash command
    local hash_cmd
    if ! hash_cmd=$(get_hash_command); then
        echo_error "Update failed: No suitable hashing command found."; exit 1;
    fi
    
    # Calculate hash of current script
    local current_hash
    current_hash=$(cat "$INSTALL_PATH" | calculate_hash "$hash_cmd")
    if [[ -z "$current_hash" ]]; then
        echo_error "Update failed: Could not calculate hash of local script."; exit 1;
    fi
    
    # Fetch remote script content
    echo_info "Downloading latest version..."
    local remote_content
    remote_content=$(curl -fsSL "$REMOTE_SCRIPT_URL")
    if [[ $? -ne 0 ]] || [[ -z "$remote_content" ]]; then
        echo_error "Update failed: Could not download the latest version."; exit 1;
    fi
    
    # Calculate hash of remote script content
    local remote_hash
    remote_hash=$(echo "$remote_content" | calculate_hash "$hash_cmd")
    if [[ -z "$remote_hash" ]]; then
        echo_error "Update failed: Could not calculate hash of remote script."; exit 1;
    fi
    
    # Compare hashes
    if [[ "$current_hash" == "$remote_hash" ]]; then
        echo_success "✔ You already have the latest version of '$SCRIPT_FILENAME'!"
        exit 0
    fi
    
    local temp_file
    temp_file=$(mktemp "/tmp/${SCRIPT_FILENAME}.XXXXXX")
    # Ensure temp file is cleaned up on unexpected exit within subshell
    trap 'rm -f "$temp_file"' EXIT HUP INT QUIT TERM
    
    # Save the downloaded content to temp file
    echo "$remote_content" > "$temp_file"
    if [[ ! -s "$temp_file" ]]; then echo_error "Update failed: Downloaded file is empty."; exit 1; fi
    
    # Basic syntax check
    if command -v bash &>/dev/null && ! bash -n "$temp_file"; then echo_error "Update failed: Downloaded script has syntax errors."; exit 1; fi
    echo_success "✔ Downloaded script passed syntax check."
    chmod +x "$temp_file" # set -e handles chmod failure
    echo_info "Replacing current script ($INSTALL_PATH)..."
    # Use sudo if the script isn't writable by the user (common if installed system-wide)
    if [[ ! -w "$INSTALL_PATH" ]] && command -v sudo >/dev/null; then
        echo_info "Write permission needed for $INSTALL_PATH. Attempting with sudo..."
        sudo mv "$temp_file" "$INSTALL_PATH"
    elif [[ ! -w "$INSTALL_PATH" ]]; then
         echo_error "Update failed: No write permission for $INSTALL_PATH and sudo not found/used."
         echo_info "Try running 'sudo g. --update' or update manually via installer."
         exit 1 # Exit failure explicitly
    else
        mv "$temp_file" "$INSTALL_PATH" # set -e handles mv failure
    fi
    # If mv succeeds, the trap from the old script is no longer relevant in this subshell
    trap - EXIT HUP INT QUIT TERM # Clear trap on success

    echo "" # Add spacing
    echo_success "✔ '$SCRIPT_FILENAME' updated successfully!"
    echo_info "Please restart your terminal or run 'hash -r' for the shell to see the new version."
    echo ""
    exit 0 # Explicitly exit successfully from subshell
  )
  # Capture the exit status of the subshell
  local update_status=$?
  # Exit the main script process with the status from the subshell
  exit $update_status
}

# --- End Update Functions ---

# ==========================================================
# Main Execution Logic Function
# ==========================================================
main_commit_logic() {
  # Run periodic check in background *only* during normal operation
  ( check_for_update "$CHECK_INTERVAL_SECONDS" >& /dev/null & )

  # --- Sanity Checks ---
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then 
    echo_error "Not inside a Git repository."
    echo_info "Please navigate to a Git repository directory and try again."
    echo_info "If this is a new project, initialize it with 'git init' first."
    exit 1 
  fi
  
  if ! command -v jq &>/dev/null; then 
    echo_error "'jq' command not found."
    echo_info "Install via package manager:"
    echo_info "  • macOS: brew install jq"
    echo_info "  • Ubuntu/Debian: sudo apt install jq"
    echo_info "  • Fedora/RHEL: sudo dnf install jq"
    echo_info "  • Windows: choco install jq or scoop install jq"
    exit 1 
  fi
  
  if ! command -v ollama &>/dev/null; then 
    echo_error "'ollama' command not found."
    echo_info "Install from https://ollama.ai"
    echo_info "After installing, run: ollama pull $MODEL"
    exit 1 
  fi
  # --- End Sanity Checks ---

  echo "" # Start output with a blank line

  local COMMIT_MESSAGE="" # Use local for vars inside function
  # Use the first argument passed to *this function* for the commit message
  local PROVIDED_MESSAGE="$1"
  local STAGED_FILES_LIST staged_files_count staged_file

  # --- Git Add & List Staged Files ---
  if ! git add . ; then echo_error "Failed to stage changes."; exit 1; fi

  STAGED_FILES_LIST=$(git diff --staged --name-only)
  staged_files_count=$(echo "$STAGED_FILES_LIST" | wc -l | awk '{$1=$1};1') # Count lines

  if [ "$staged_files_count" -eq 0 ]; then
    if [ -n "$(git status --porcelain)" ]; then
      echo_info "◇ No changes staged. There are unstaged changes or untracked files."
      echo_info "  Stage them first or commit specific files."
    else
      echo_success "✔ No changes detected. Working tree clean."
      echo_info "  Nothing to commit!"
    fi
    exit 0
  else
    # Check if there's actual content in the diff
    local DIFF_CONTENT
    DIFF_CONTENT=$(git diff --staged)
    if [ -z "$DIFF_CONTENT" ]; then 
      echo_info "◇ Files are staged but contain no changes."
      echo_info "  This can happen with whitespace-only changes or permission changes."
      echo_success "✔ Nothing to commit!"
      exit 0
    fi
    
    echo_info "◇ $staged_files_count staged files:"
    while IFS= read -r staged_file; do
        echo_info "  $staged_file"
    done <<< "$STAGED_FILES_LIST"
    echo_info "│" # Connector
  fi

  # --- Commit Message Handling ---
  if [ -n "$PROVIDED_MESSAGE" ]; then
    COMMIT_MESSAGE="$PROVIDED_MESSAGE"
    echo_info "◇ Using provided commit message"
    echo_info "│"
    echo_info "└ Provided commit message:"
    echo_info "$COMMIT_DIVIDER"
    echo_indented "$COMMIT_MESSAGE" # Print message indented
    echo_info "$COMMIT_DIVIDER"
    echo ""
  else
    # --- Model Check (silent unless error) ---
    if ! ollama list | grep -q "$MODEL"; then
        echo_info "Model '$MODEL' not found. Attempting to download..."
        if ! ollama pull "$MODEL"; then 
          echo_error "Failed to pull model '$MODEL'."
          echo_info "Troubleshooting steps:"
          echo_info "  1. Check your internet connection"
          echo_info "  2. Verify the model name is correct (current: $MODEL)"
          echo_info "  3. Try manually with: ollama pull $MODEL"
          echo_info "  4. Check Ollama service status with: ollama ps"
          exit 1
        fi
        echo_success "Model '$MODEL' successfully downloaded."
    fi

    # --- Diff (silent) ---
    local DIFF_CONTENT
    DIFF_CONTENT=$(git diff --staged)
    if [ -z "$DIFF_CONTENT" ]; then 
      # This should never happen now as we check earlier, but keeping as a safeguard
      echo_success "✔ No diff content found for staged files."; 
      exit 0; 
    fi

    # --- AI Generation ---
    local USER_PROMPT_CONTENT JSON_PAYLOAD OLLAMA_RESPONSE CURL_EXIT_CODE GENERATED_CONTENT OLLAMA_ERROR
    USER_PROMPT_CONTENT=$(printf 'Generate a conventional commit message for the following diff:\n\n%s' "$DIFF_CONTENT")

    # ** Enhanced system prompt with stronger constraints and examples **
    JSON_PAYLOAD=$(jq -n \
      --arg model "$MODEL" \
      --arg sys "You are a Git commit message generator that follows the Conventional Commits specification strictly.
TASK: Generate ONLY a single-line commit message based on the provided Git diff.
FORMAT: <type>(<scope>): <subject>

RULES:
- <type> MUST be one of: feat, fix, build, chore, ci, docs, style, refactor, perf, test
- (<scope>) is optional and should be a noun describing the section affected
- <subject> MUST be imperative, lowercase, and concise (max 50 chars)
- The ENTIRE message should be plain text, no more than 72 characters
- NEVER use markdown, code blocks, backticks, JSON, or any formatting
- NEVER include explanations or additional context

EXAMPLES OF CORRECT RESPONSES:
feat(auth): add login functionality
fix(api): resolve timeout issue in requests
docs(readme): update installation instructions
refactor(utils): simplify error handling logic

EXAMPLES OF INCORRECT RESPONSES:
```feat(auth): add login functionality```
feat(auth): add login functionality - This adds the login screen and API
{\"type\": \"feat\", \"scope\": \"auth\", \"subject\": \"add login functionality\"}

RESPOND ONLY with the single-line commit message and nothing else." \
      --arg user "$USER_PROMPT_CONTENT" \
      --argjson temp "$TEMP" \
      '{ model: $model, messages: [ {role: "system", content: $sys}, {role: "user", content: $user} ], stream: false, options: { temperature: $temp } }')


    if [ $? -ne 0 ]; then echo_error "Failed to construct JSON payload using jq."; git reset >/dev/null 2>&1; exit 1; fi

    echo_info "◇ 📝 Generating commit message..." # Let user know processing is happening
    
    OLLAMA_RESPONSE=$(curl -sf -X POST "$OLLAMA_ENDPOINT" -d "$JSON_PAYLOAD")
    CURL_EXIT_CODE=$?
    if [ $CURL_EXIT_CODE -ne 0 ]; then 
      echo_error "Failed to communicate with Ollama API at $OLLAMA_ENDPOINT."
      echo_info "Troubleshooting steps:"
      echo_info "  1. Ensure Ollama service is running: ollama ps"
      echo_info "  2. Check if the endpoint is correct: $OLLAMA_ENDPOINT"
      echo_info "  3. Restart Ollama service if needed"
      echo_info "  4. Curl exit code: $CURL_EXIT_CODE (0=success)"
      git reset >/dev/null 2>&1
      exit 1
    fi

    GENERATED_CONTENT=$(echo "$OLLAMA_RESPONSE" | jq -r '.message.content // empty')
    OLLAMA_ERROR=$(echo "$OLLAMA_RESPONSE" | jq -r '.error // empty')
    if [ -n "$OLLAMA_ERROR" ] && [ "$OLLAMA_ERROR" != "null" ] && [ "$OLLAMA_ERROR" != "empty" ]; then 
      echo_error "Ollama API error: $OLLAMA_ERROR"
      echo_info "Troubleshooting steps:"
      echo_info "  1. Ensure model '$MODEL' is available: ollama list"
      echo_info "  2. Check if Ollama is operational: ollama ps"
      echo_info "  3. Try pulling the model again: ollama pull $MODEL"
      echo_info "  4. Check for Ollama updates: ollama upgrade"
      git reset >/dev/null 2>&1
      exit 1
    fi

    # Enhanced post-processing to strip any markdown formatting or unwanted characters
    COMMIT_MESSAGE=$(echo "$GENERATED_CONTENT" | 
      sed -E 's/^```[a-z]*$//g' |  # Remove opening code block markers
      sed -E 's/^```$//g' |         # Remove closing code block markers
      sed -E 's/^`//g' |            # Remove leading backticks
      sed -E 's/`$//g' |            # Remove trailing backticks
      sed -E 's/^\s*"(.*)"\s*$/\1/g' | # Remove surrounding quotes
      sed -E 's/^\s*//;s/\s*$//g'   # Trim whitespace
    )
    if [ -z "$COMMIT_MESSAGE" ]; then 
      echo_error "Ollama generated empty message."
      echo_info "Troubleshooting steps:"
      echo_info "  1. Check if your changes are meaningful (not just whitespace)"
      echo_info "  2. Try again or provide your own message: g. \"your message\""
      echo_info "  3. Try a different model by setting GAC_MODEL environment variable"
      echo_info "Raw Response: $OLLAMA_RESPONSE"
      git reset >/dev/null 2>&1
      exit 1
    fi

    echo_info "│" # Connector
    echo_info "└ Generated commit message:"
    echo_info "$COMMIT_DIVIDER"
    echo_indented "$COMMIT_MESSAGE" # Print message indented
    echo_info "$COMMIT_DIVIDER"
    echo ""
  fi

  # --- Commit ---
  local COMMIT_OUTPUT GIT_COMMIT_EXIT_CODE
  # Use process substitution to capture stdout and stderr, pass message correctly
  exec 3>&1 # Save original stdout
  COMMIT_OUTPUT=$(git commit -m "$COMMIT_MESSAGE" 2>&1)
  GIT_COMMIT_EXIT_CODE=$?
  exec 3>&- # Close fd 3

  if [ $GIT_COMMIT_EXIT_CODE -ne 0 ]; then
    echo_error "Git commit failed."
    echo_info "Troubleshooting steps:"
    echo_info "  1. Check if you have configured your Git user.name and user.email"
    echo_info "  2. Ensure you have permission to commit to this repository"
    echo_info "  3. Check if there are pre-commit hooks that might be failing"
    echo_info "└ Commit Output:"
    echo_indented "$COMMIT_OUTPUT" # Show Git's error output
    git reset >/dev/null 2>&1 # Attempt to unstage on failure
    exit 1
  fi

  # Extract the commit hash from the output
  local COMMIT_HASH=$(echo "$COMMIT_OUTPUT" | grep -o '\[[^]]*\]')
  echo_success "✔ Successfully committed $COMMIT_HASH"

  # Only show commit details if they contain useful information beyond the commit hash
  if [[ -n "$COMMIT_OUTPUT" && "$COMMIT_OUTPUT" != *"$COMMIT_HASH"* ]]; then
    echo_info "│"
    echo_info "└ Commit Details:"
    echo_indented "$COMMIT_OUTPUT" # Show standard Git commit output
  fi

  # --- Push ---
  local CURRENT_BRANCH REMOTE_NAME PUSH_OUTPUT GIT_PUSH_EXIT_CODE
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if git remote | grep -q '^origin$'; then REMOTE_NAME="origin"; else REMOTE_NAME=$(git remote | head -n 1); fi

  if [ -z "$REMOTE_NAME" ]; then
    echo_info "◇ No git remote found. Skipping push."
  else
    # Capture stderr and stdout for push
    PUSH_OUTPUT=$(git push "$REMOTE_NAME" "$CURRENT_BRANCH" 2>&1)
    GIT_PUSH_EXIT_CODE=$?

    if [ $GIT_PUSH_EXIT_CODE -ne 0 ]; then
      echo_error "◇ ✗ Push failed."
      echo_info "Troubleshooting steps:"
      echo_info "  1. Check if you have permission to push to $REMOTE_NAME"
      echo_info "  2. Ensure your branch is not behind the remote (try git pull first)"
      echo_info "  3. Check if there are pre-push hooks that might be failing"
      echo_info "  4. Verify your network connection and remote URL"
      echo_info "└ Push Output:"
      echo_indented "$PUSH_OUTPUT" # Show Git's error output
      # Exit 0 here, commit succeeded. User must resolve push.
    else
      echo_success "◇ ✔ Push successful: $REMOTE_NAME → $CURRENT_BRANCH"
    fi
  fi

  # --- Final Blank Line ---
  echo ""

  exit 0 # Exit successfully from main logic
}

# ==========================================================
# Script Entry Point - Argument Parsing
# ==========================================================
case "$1" in
  update|--update)
    perform_update
    # Use the exit status from the perform_update subshell
    exit $?
    ;;
  help|--help|-h)
    # Simple help message
    show_logo
    echo "Usage: g. [commit message]"
    echo "       g. update | --update"
    echo "       g. help | --help | -h"
    echo ""
    echo "Stages all changes, generates AI commit message (if none provided), commits, and pushes."
    echo "Use 'update' or '--update' to self-update the script."
    exit 0
    ;;
  *)
    # No specific command recognized, proceed to main commit logic
    # Pass all arguments ($@) in case user provides multi-word commit message without quotes initially
    main_commit_logic "$@"
    # Use exit code from main logic
    exit $?
    ;;
esac

# Fallback exit (should only be reached if case statement fails unexpectedly)
exit 1
